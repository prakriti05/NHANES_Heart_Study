# -*- coding: utf-8 -*-
"""performance_tuning.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pw8XCSPUDyLC4SkD-8LFQdIa1TRdSN-D
"""

# Assuming 'y' is the blood pressure or other continuous measurement
# Define the threshold value for hypertension classification
threshold_value = 140  # Example threshold (e.g., 140 mmHg for systolic blood pressure)

# Ensure y is binary (1 for Hypertension, 0 for no hypertension)
y_binary = y.apply(lambda x: 1 if x > threshold_value else 0)  # Adjust threshold_value based on your data

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y_binary, test_size=0.2, random_state=42)

# Train the logistic regression model
lr_model = LogisticRegression(max_iter=1000)  # Increase max_iter if needed
lr_model.fit(X_train, y_train)

# Save the model to a .pkl file
with open('logistic_regression_model.pkl', 'wb') as model_file:
    pickle.dump(lr_model, model_file)

# Make predictions on the test set
y_pred_lr = lr_model.predict(X_test)

# Evaluate the model
accuracy_lr = accuracy_score(y_test, y_pred_lr)
precision_lr = precision_score(y_test, y_pred_lr)
classification_rep = classification_report(y_test, y_pred_lr)

# Save the model metrics to a CSV file
metrics_data = {
    'Model': ['Logistic Regression'],
    'Accuracy': [accuracy_lr],
    'Precision': [precision_lr],
}

metrics_df = pd.DataFrame(metrics_data)
metrics_df.to_csv('model_metrics.csv', index=False)

# Display classification report
print("Classification Report:\n", classification_rep)

# Confusion matrix for Logistic Regression
conf_matrix_lr = confusion_matrix(y_test, y_pred_lr)
disp = ConfusionMatrixDisplay(conf_matrix_lr, display_labels=['No Hypertension', 'Hypertension'])
disp.plot(cmap=plt.cm.Blues)
plt.title("Logistic Regression - Confusion Matrix")
plt.show()